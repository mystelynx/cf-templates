
"WebServerInstance": {
  "Type" : "AWS::EC2::Instance",
  "Metadata" : {
    "AWS::CloudFormation::Init" : {
      "config" : {
        "packages" : {
          "yum" : {
            "httpd"    : [],
            "gcc-c++"  : [],
            "php"      : [],
            "php-pear" : []
          }
        },

        "files" : {
          "/var/www/html/index.php" : {
            "content" : { "Fn::Join" : [${?empty}"", [
              """
                <?php
                echo '<h1>AWS CloudFormation sample application for Amazon ElastiCache</h1>';
              """,
              "$server_endpoint = '", { "Fn::GetAtt" : [ "CacheCluster", "ConfigurationEndpoint.Address" ]}, "';\\n",
              "$server_port = ", { "Fn::GetAtt" : [ "CacheCluster", "ConfigurationEndpoint.Port" ]}, ";\\n\\n",
              """
                /**
                 * The following will initialize a Mecached client to utilize the Auto Discovery feature.
                 *
                 * By configuring the client with the Dynamic client mode with single endpoint, the
                 * client will periodically use the configuration endpoint to retrieve the current cache
                 * cluster configuration. This allows scaling the cache cluster up or down in nuber of nodes
                 * without requiring any changes to the PHP application.
                 */

                $dynamic_client = new Memcached();
                $dynamic_client->setOption(Memcached::OPT_CLIENT_MODE, Memcached::DYNAMIC_CLIENT_MODE);
                $dynamic_client->addServer($server_endpoint, $server_port);

                $tmp_object = new stdClass;
                $tmp_object->str_attr = 'test';
                $tmp_object->int_attr = 123;

                $dynamic_client->set('key', $tmp_object, 10) or die ('Failed to save data to the cache');
                echo '<p>Store data in the cache (data will expire in 10 seconds)</p>';

                $get_result = $dynamic_client->get('key');
                echo '<p>Data from the cache:<br/>';

                var_dump($get_result);

                echo '</p>';
                ?>
              """
            ]]},
            "mode"    : "000644",
            "owner"   : "apache",
            "group"   : "apache"
          },
          "/etc/cfn/cfn-hup.conf" : {
            "content" : { "Fn::Join" : [${?empty}"", [
              "[main]\\n",
              "stack=", { "Ref" : "AWS::StackId" }, "\\n",
              "region=", { "Ref" : "AWS::Region" }, "\\n"
            ]]},
            "mode"    : "000400",
            "owner"   : "root",
            "group"   : "root"
          },

          "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
            "content": { "Fn::Join" : [${?empty}"", [
              """
              [cfn-auto-reloader-hook]
              triggers=post.update
              path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
              """,
              "action=/opt/aws/bin/cfn-init -v ",
              "         --stack ", { "Ref" : "AWS::StackName" },
              "         --resource WebServerInstance ",
              "         --region ", { "Ref" : "AWS::Region" }, "\\n",
              "runas=root\\n"
            ]]}
          }
        },

        "commands" : {
          "00_install_emcached_client" : {
            "command" : "pecl install https://s3.amazonaws.com/elasticache-downloads/ClusterClient/PHP/latest-64bit"
          },
          "01_enable_auto_discovery" : {
            "command" : "echo 'extension=amazon-elasticache-cluster-client.so' > /etc/php.d/memcached.ini"
          }
        },

        "services" : {
          "sysvinit" : {
            "httpd"    : { "enabled" : "true", "ensureRunning" : "true" },
            "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
          }
        }
      }
    }
  },
  "Properties": {
    "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
      { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch"  ]}]},
    "InstanceType"   : { "Ref" : "InstanceType" },
    "SecurityGroups" : [ {"Ref" : "WebServerSecurityGroup"} ],
    "KeyName"        : { "Ref" : "KeyName" },
    "UserData"       : { "Fn::Base64" : { "Fn::Join" : [${?empty}"", [
      """
      #!/bin/bash -xe
      yum update -y aws-cfn-bootstrap
      """,
      "# Setup the PHP sample application\\n",
      "/opt/aws/bin/cfn-init -v ",
      "         --stack ", { "Ref" : "AWS::StackName" },
      "         --resource WebServerInstance ",
      "         --region ", { "Ref" : "AWS::Region" }, "\\n",

      "# Signal the status of cfn-init\\n",
      "/opt/aws/bin/cfn-signal -e $? ",
      "         --stack ", { "Ref" : "AWS::StackName" },
      "         --resource WebServerInstance ",
      "         --region ", { "Ref" : "AWS::Region" }, "\\n"
    ]]}}
  },
  "CreationPolicy" : {
    "ResourceSignal" : {
      "Timeout" : "PT15M"
    }
  }
}
